---
- name: Setup Jenkins
  hosts: all
  become: true
  vars:
    jenkins_url: "http://localhost:8080"
    username: "bashar"
    new_password: "1234"
    fullname: "BasharNaieem"
    email: "hello@world.com"
    job_name: "ansible-demo-job"
    job_config_xml_path: "/tmp/job-config.xml"
    jenkins_crumb_url: "{{ jenkins_url }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb)"
    
  tasks:
    - name: Update apt repository
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - openjdk-17-jdk
          - wget
          - gnupg
          - unzip
        state: present

    - name: Add Jenkins GPG key
      get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /usr/share/keyrings/jenkins-keyring.asc

    - name: Add Jenkins APT repository
      lineinfile:
        path: /etc/apt/sources.list.d/jenkins.list
        line: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/"
        create: yes

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Install apache2
      apt:
        name: apache2
        state: present

    - name: Start apache service
      service:
        name: apache2
        state: started
        enabled: yes

    - name: Start Jenkins service
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: Wait for Jenkins to start
      wait_for:
        port: 8080
        delay: 10
        timeout: 300

    - name: Wait until Jenkins is fully up and running
      uri:
        url: "{{ jenkins_url }}/login"
        return_content: no
        status_code: 200
        timeout: 60
      register: jenkins_status
      until: jenkins_status.status == 200
      retries: 10
      delay: 10

    - name: Get initial admin password from Jenkins
      command: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: initial_password_output

    - name: Check if initial admin password is found
      fail:
        msg: "Initial admin password file not found!"
      when: initial_password_output.stdout == ""

    - name: Set password variable
      set_fact:
        password: "{{ initial_password_output.stdout }}"

    - name: Create cookie jar
      command: mktemp
      register: cookie_jar

    - name: Get Jenkins crumb
      shell: |
        curl -u "admin:{{ password }}" --cookie-jar "{{ cookie_jar.stdout }}" "{{ jenkins_url }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb)"
      register: full_crumb_output
    - name: Extract only crumb
      set_fact:
        only_crumb: "{{ full_crumb_output.stdout.split(':')[1] | trim }}"
    - name: Create admin user
      shell: |
        curl -X POST -u "admin:{{ password }}" "{{ jenkins_url }}/setupWizard/createAdminUser" \
          -H "Connection: keep-alive" \
          -H "Accept: application/json, text/javascript" \
          -H "X-Requested-With: XMLHttpRequest" \
          -H "{{ full_crumb_output.stdout }}" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          --cookie "{{ cookie_jar.stdout }}" \
          --data-raw "username={{ username }}&password1={{ new_password }}&password2={{ new_password }}&fullname={{ fullname }}&email={{ email }}&Jenkins-Crumb={{ only_crumb }}&json=%7B%22username%22%3A%20%22{{ username }}%22%2C%20%22password1%22%3A%20%22{{ new_password }}%22%2C%20%22password2%22%3A%20%22{{ new_password }}%22%2C%20%22fullname%22%3A%20%22{{ fullname }}%22%2C%20%22email%22%3A%20%22{{ email }}%22%2C%20%22Jenkins-Crumb%22%3A%20%22{{ only_crumb }}%22%7D"
    - name: Install plugins
      shell: |
        full_crumb=$(curl -u "{{ username }}:{{ new_password }}" --cookie-jar "{{ cookie_jar.stdout }}" "{{ jenkins_url }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb)")
        only_crumb=$(echo "$full_crumb" | cut -d: -f2)
        curl -X POST -u "{{ username }}:{{ new_password }}" "{{ jenkins_url }}/pluginManager/installPlugins" \
          -H "Connection: keep-alive" \
          -H "Accept: application/json, text/javascript, */*; q=0.01" \
          -H "X-Requested-With: XMLHttpRequest" \
          -H "$full_crumb" \
          -H "Content-Type: application/json" \
          --cookie "{{ cookie_jar.stdout }}" \
          --data-raw '{"dynamicLoad":true,"plugins":["cloudbees-folder","antisamy-markup-formatter","build-timeout","credentials-binding","sonar","timestamper","ws-cleanup","ant","gradle","workflow-aggregator","github-branch-source","pipeline-github-lib","pipeline-stage-view","git","ssh-slaves","matrix-auth","pam-auth","ldap","email-ext","mailer"],"Jenkins-Crumb":"'$only_crumb'"}'
    - name: Confirm Jenkins URL
      shell: |
        url_urlEncoded=$(python3 -c "import urllib.parse; print(urllib.parse.quote('{{ jenkins_url }}', safe=''))")
        curl -X POST -u "{{ username }}:{{ new_password }}" "{{ jenkins_url }}/setupWizard/configureInstance" \
          -H "Connection: keep-alive" \
          -H "Accept: application/json, text/javascript, */*; q=0.01" \
          -H "X-Requested-With: XMLHttpRequest" \
          -H "$full_crumb" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          --cookie "{{ cookie_jar.stdout }}" \
          --data-raw "rootUrl=$url_urlEncoded%2F&Jenkins-Crumb={{ only_crumb }}&json=%7B%22rootUrl%22%3A%20%22$url_urlEncoded%2F%22%2C%20%22Jenkins-Crumb%22%3A%20%22{{ only_crumb }}%22%7D"
    - name: Complete Jenkins setup
      debug:
        msg: "Jenkins setup complete!"
    - name: Generate API token for the user
      shell: |
        full_crumb=$(curl -u "{{ username }}:{{ new_password }}" --cookie-jar "{{ cookie_jar.stdout }}" "{{ jenkins_url }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb)")
        only_crumb=$(echo "$full_crumb" | cut -d: -f2)
        curl -X POST -u "{{ username }}:{{ new_password }}" "{{ jenkins_url }}/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken" \
          -H "Connection: keep-alive" \
          -H "Accept: application/json, text/javascript, */*; q=0.01" \
          -H "X-Requested-With: XMLHttpRequest" \
          -H "$full_crumb" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          --cookie "{{ cookie_jar.stdout }}" \
          --data-raw 'newTokenName=ansible-token'
      register: api_token_output
    - name: Debug raw API token output
      debug:
        var: api_token_output
    - name: Extract API token
      set_fact:
        api_token: "{{ api_token_output.stdout | from_json | json_query('data.tokenValue') }}"
    - name: Display the generated API token
      debug:
        msg: "Generated API token: {{ api_token }}"

    - name: Download SonarQube Scanner
      get_url:
        url: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        dest: /tmp/sonar-scanner.zip

    - name: Unzip SonarQube Scanner
      unarchive:
        src: /tmp/sonar-scanner.zip
        dest: /opt/
        remote_src: yes

    - name: Create symlink for SonarQube Scanner
      file:
        src: /opt/sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner
        dest: /usr/local/bin/sonar-scanner
        state: link

    - name: Clean up downloaded zip file
      file:
        path: /tmp/sonar-scanner.zip
        state: absent

    - name: Create job config XML
      copy:
        content: |
          <?xml version='1.0' encoding='UTF-8'?>
          <project>
          <flow-definition plugin="workflow-job@2.40">
              <actions/>
              <description>An Ansible-created Jenkins pipeline job for GitHub and SonarQube analysis</description>
              <keepDependencies>false</keepDependencies>
              <properties/>
              <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition">
                  <script>
                      <![CDATA[
                      pipeline {
                          agent any

                          stages {
                              stage('Checkout') {
                                  steps {
                                      script {
                                          git url: 'https://github.com/BasharNaieem/Login-Page.git', branch: 'main'
                                      }
                                  }
                              }
                              stage('SonarQube Analysis') {
                                  steps {
                                      script {
                                          echo "Running SonarQube Analysis"
                                          sh '''
                                          /usr/local/bin/sonar-scanner \
                                          -Dsonar.projectKey=your-project-key \
                                          -Dsonar.sources=. \
                                          -Dsonar.host.url="your-sonarqube-server-url" \
                                          -Dsonar.login="your-sonarqube-token"
                                          '''
                                      }
                                  }
                              }
                          }

                          post {
                              always {
                                  echo 'Pipeline completed!'
                              }
                          }
                      }
                      ]]>
                  </script>
                  <lightweight>true</lightweight>
              </definition>
              <triggers/>
              <disabled>false</disabled>
          </flow-definition>
          </project>
        dest: "{{ job_config_xml_path }}"
      register: create_xml

    - name: Debug XML file creation
      debug:
        var: create_xml

    - name: Create a Jenkins job
      shell: |
        curl -X POST -u "{{ username }}:{{ api_token }}" "{{ jenkins_url }}/createItem?name={{ job_name }}" \
        --header "Content-Type: application/xml" \
        --data-binary "@{{ job_config_xml_path }}"
      register: create_job_response

    - name: Debug job creation response
      debug:
        var: create_job_response

    - name: Trigger the Jenkins job build
      shell: |
        curl -X POST -u "{{ username }}:{{ api_token }}" "{{ jenkins_url }}/job/{{ job_name }}/build"
      register: build_job_response

    - name: Debug job build response
      debug:
        var: build_job_response

    - name: Verify job creation
      shell: |
        curl -u "{{ username }}:{{ api_token }}" "{{ jenkins_url }}/job/{{ job_name }}/api/json"
      register: verify_job_response

    - name: Display job details
      debug:
        msg: "Job {{ job_name }} details: {{ verify_job_response.stdout }}"
    
 